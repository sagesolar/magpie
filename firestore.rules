rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection - personal user data
    match /users/{userId} {
      // Users can only read/write their own profile
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow user creation during first login
      allow create: if request.auth != null && request.auth.uid == userId
        && resource == null; // Ensure document doesn't already exist
    }
    
    // Books collection - with ownership-based access control
    match /books/{isbn} {
      // Helper function to check if user is in the flock (has access)
      function userInFlock() {
        return request.auth != null 
          && request.auth.uid in resource.data.flock;
      }
      
      // Helper function to check if user is the curator (addedBy)
      function userIsCurator() {
        return request.auth != null 
          && request.auth.uid == resource.data.addedBy;
      }
      
      // Helper function to check nesting rights
      function hasNestingRight(right) {
        return resource.data.nestingRights[right] == true;
      }
      
      // READ: Allow if user is in the flock and has view rights
      allow read: if request.auth != null 
        && userInFlock() 
        && hasNestingRight('canView');
      
      // CREATE: Allow authenticated users to create books
      // The backend will automatically set addedBy and flock
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.addedBy
        && request.auth.uid in request.resource.data.flock;
      
      // UPDATE: Allow if user is in flock and has edit rights
      // Special handling for sharing (flock updates)
      allow update: if request.auth != null 
        && userInFlock()
        && (
          // Regular updates require edit rights
          (hasNestingRight('canEdit') && !('flock' in request.resource.data.diff(resource.data).affectedKeys()))
          ||
          // Sharing updates require share rights
          (hasNestingRight('canShare') && 'flock' in request.resource.data.diff(resource.data).affectedKeys())
        );
      
      // DELETE: Allow if user is in flock and has remove rights
      allow delete: if request.auth != null 
        && userInFlock() 
        && hasNestingRight('canRemove');
    }
    
    // System metadata collection (for app configuration)
    match /system/{document} {
      allow read: if true; // Public read for app configuration
      allow write: if false; // Only allow writes through admin/setup scripts
    }
    
    // Analytics collection (optional, for usage tracking)
    match /analytics/{document} {
      // Allow authenticated users to write analytics
      allow read: if false; // Analytics are write-only for users
      allow create: if request.auth != null;
      allow update, delete: if false; // No updates to analytics
    }
    
    // Shared collections - for books shared across multiple users
    match /shared_collections/{collectionId} {
      // Collection members can read the collection
      allow read: if request.auth != null 
        && request.auth.uid in resource.data.members;
      
      // Collection creator can modify
      allow write: if request.auth != null 
        && request.auth.uid == resource.data.createdBy;
      
      // Members can create new collections
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.createdBy
        && request.auth.uid in request.resource.data.members;
    }
    
    // Default deny rule
    match /{document=**} {
      allow read, write: if false;
    }
  }
}