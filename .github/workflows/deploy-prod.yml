name: Deploy to Production

on:
  push:
    branches: [main]
  release:
    types: [published]

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID_PROD }}
  CLOUD_RUN_SERVICE: ${{ secrets.CLOUD_RUN_SERVICE_PROD }}
  CLOUD_RUN_REGION: ${{ secrets.CLOUD_RUN_REGION }}
  FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID_PROD }}
  FIRESTORE_DATABASE_ID: ${{ secrets.FIRESTORE_DATABASE_ID_PROD }}

jobs:
  deploy-backend:
    name: Deploy Backend to Cloud Run (Prod)
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build application
        run: npm run build

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_PROD }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for GCP
        run: gcloud auth configure-docker

      - name: Build Docker image
        run: |
          docker build -t gcr.io/$GCP_PROJECT_ID/$CLOUD_RUN_SERVICE:$GITHUB_SHA \
            -t gcr.io/$GCP_PROJECT_ID/$CLOUD_RUN_SERVICE:latest .

      - name: Push Docker image
        run: |
          docker push gcr.io/$GCP_PROJECT_ID/$CLOUD_RUN_SERVICE:$GITHUB_SHA
          docker push gcr.io/$GCP_PROJECT_ID/$CLOUD_RUN_SERVICE:latest

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy $CLOUD_RUN_SERVICE \
            --image gcr.io/$GCP_PROJECT_ID/$CLOUD_RUN_SERVICE:$GITHUB_SHA \
            --region $CLOUD_RUN_REGION \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars GOOGLE_CLOUD_PROJECT_ID=${{ secrets.GCP_PROJECT_ID_PROD }} \
            --set-env-vars FIRESTORE_DATABASE_ID=${{ secrets.FIRESTORE_DATABASE_ID_PROD }} \
            --set-env-vars NODE_ENV=production \
            --memory 2Gi \
            --cpu 2 \
            --min-instances 1 \
            --max-instances 100 \
            --port 3000 \
            --project $GCP_PROJECT_ID

      - name: Get Cloud Run URL
        id: service-url
        run: |
          URL=$(gcloud run services describe $CLOUD_RUN_SERVICE \
            --region=$CLOUD_RUN_REGION \
            --project=$GCP_PROJECT_ID \
            --format='value(status.url)')
          echo "SERVICE_URL=$URL" >> $GITHUB_OUTPUT
          echo "Backend deployed to: $URL"

  deploy-frontend:
    name: Deploy PWA to Firebase Hosting (Prod)
    runs-on: ubuntu-latest
    needs: deploy-backend
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_PROD }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Get backend URL
        id: backend-url
        run: |
          URL=$(gcloud run services describe $CLOUD_RUN_SERVICE \
            --region=$CLOUD_RUN_REGION \
            --project=$GCP_PROJECT_ID \
            --format='value(status.url)')
          echo "BACKEND_URL=$URL" >> $GITHUB_OUTPUT

      - name: Install dependencies and build PWA
        run: |
          cd public
          if [ -f package.json ]; then
            echo "Installing frontend dependencies..."
            npm ci
            
            echo "Setting up environment variables..."
            echo "VITE_API_BASE_URL=${{ steps.backend-url.outputs.BACKEND_URL }}" > .env.production
            echo "NODE_ENV=production" >> .env.production
            
            echo "Building PWA..."
            npm run build
            
            echo "Build complete, deploying from dist folder..."
          else
            echo "WARNING: No package.json found in public folder, using existing files"
          fi

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_PROD }}
          projectId: $FIREBASE_PROJECT_ID
          channelId: live
          entryPoint: ./public

      - name: Initialize Database
        run: |
          cd public
          if [ -f ../scripts/database/init-database.sh ]; then
            echo "Initializing database..."
            chmod +x ../scripts/database/init-database.sh
            GOOGLE_CLOUD_PROJECT_ID=${{ secrets.GCP_PROJECT_ID_PROD }} \
            FIRESTORE_DATABASE_ID=${{ secrets.FIRESTORE_DATABASE_ID_PROD }} \
            ../scripts/database/init-database.sh
          else
            echo "INFO: No database initialization script found"
          fi
